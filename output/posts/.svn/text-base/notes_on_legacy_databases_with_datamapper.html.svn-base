<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
  <head>
    <meta content='text/html; charset=utf-8' http-equiv='Content-type' />
    <meta content='Tony Pitale' name='author' />
    <meta content='i/cbJtXe1ZDIZNta65CghwcRM/zFMRHIsbR9poU+uwU=' name='verify-v1' />
    <title>Legacy Databases with DataMapper</title>
    <link href='/favicon.ico' rel='shortcut icon' />
    <!-- Site CSS -->
    <link href='/css/base.css' media='screen, projection' rel='stylesheet' type='text/css' />
  </head>
  <body>
    <div id='header'>
      <div class='wrap'>
        <div class='col'>
          <a href='/'>
            <img src='/images/logo.png' />
          </a>
        </div>
        <div class='block'>
          <ul>
            <li>
              <a href="/">Home</a>
            </li>
            <li>
              <a href="/posts/">Blog Archive</a>
            </li>
          </ul>
          <br class='clearleft' />
        </div>
      </div>
    </div>
    <div id='content'>
      <div class='wrap'>
        <div class='col'>
          <h1>Blog</h1>
        </div>
        <div class='block'>
          <div id='post'>
            <h1>Legacy Databases with DataMapper</h1>
            <h2>Something Old, Something New</h2>
            <span class='date'>2008-03-18</span>
            <p>
              In my previous post I discussed my eventual discovery that
              <a href="http://rubyonrails.org">Ruby on Rails</a>
              would not work for a new project I had begun. Thankfully, I was at the very
              beginning of my work on said project and making a transition to a new path
              was not the end of the world.
            </p>
            <p>
              As I mentioned, a helpful suggestion led me to investigate
              <a href="http://merbivore.com">Merb</a>
              as a potential framework. Merb has the benefit of letting me use any of
              three possible database ORMs. ActiveRecord is supported, as well as,
              <a href="http://datamapper.org/">DataMapper</a>
              and Sequel. Obviously, ActiveRecord did not work for me and so, I looked at
              both DataMapper and Sequel. I found DataMapper to be more usable out of the
              box and so I moved ahead using it. Sequel would have been another excellent
              alternative but, I had to pick one and continue with my work.
            </p>
            <p>
              How did DataMapper solve my legacy database issues, you may ask. The answer
              is that DataMapper provides all the same standard solutions that
              ActiveRecord does but, it allows for keys to be text or any other type as
              long as they are unique and not null. The sql requirements for a primary
              key state that it must be unique and not null, there is no requirement for
              type. There was one little issue with DataMapper in which the text fields
              were being ignored because, in DataMapper, text fields are lazy. These
              fields will not be loaded until they are requested by an application. This
              led to a number of issues but, because DataMapper is so very easy to
              contribute to, I was able to make the necessary changes with much
              appreciation from the community.
            </p>
            <p>
              In terms of conventions, DataMapper has another nifty trick up its sleeve.
              In DataMapper, when defining a column, you may use a different name for the
              property and later define the actual column name from the database. I was
              extremely enthused to find that I could change names from the database from
              <code>wc_shlfprce</code>
              to something like:
              <code>warm_case_shelf_price.</code>
              Though it was a longer name, in terms of legibility the latter is an
              infinite improvement.
            </p>
            <p>
              And so, I work on, with Merb and DataMapper as my preferred tools, at least
              for this particular project. Aside from this flexibility, DataMapper would
              normally adhere to the same specific conventions for a database as does
              ActiveRecord. Any new converts from Rails will likely feel right at home.
            </p>
          </div>
        </div>
      </div>
    </div>
    <script type='text/javascript'>
      var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
      document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
    </script>
    <script type='text/javascript'>
      var pageTracker = _gat._getTracker("UA-3879168-1");
      pageTracker._initData();
      pageTracker._trackPageview();
    </script>
  </body>
</html>
